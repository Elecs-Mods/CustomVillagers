package elec332.customvillagers.registry;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import elec332.customvillagers.Data;
import elec332.customvillagers.DuplicateVillagerIDException;
import elec332.customvillagers.VillagerTransformer;
import elec332.customvillagers.json.JsonHandler;
import elec332.customvillagers.json.VillagerData;
import elec332.customvillagers.main.CustomVillager;
import elec332.customvillagers.main.CustomVillagerModContainer;
import net.minecraft.item.ItemStack;
import net.minecraft.village.MerchantRecipe;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Created by Elec332 on 1-7-2015.
 */
@SuppressWarnings("all")
public class VillagerRegistry {

    public static final VillagerRegistry instance = new VillagerRegistry();
    private VillagerRegistry(){
        registry = Maps.newHashMap();
        syncedDataValue = Maps.newHashMap();
        files = Lists.newArrayList("villagers.json", "autoGenerated.json");
        registeredIDs = Lists.newArrayList(cpw.mods.fml.common.registry.VillagerRegistry.getRegisteredVillagers());
    }

    public static File getJsonFile(String s){
        return new File(CustomVillager.baseFile, s);
    }

    public boolean isVillagerRegistered(int i){
        return registeredIDs.contains(i);
    }

    private List<String> files;
    private List<Integer> registeredIDs;
    private Map<String, List<VillagerData>> registry;
    private Map<String, List<Integer>> syncedDataValue;

    private void registerData(String s, VillagerData data){
        registry.get(s).add(data);
        syncedDataValue.get(s).add(data.ID);
    }

    private void registerAll(String s, List<VillagerData> dataList){
        for (VillagerData data : dataList)
            registerData(s, data);
    }

    private List<VillagerData> getAutoGenerated(){
        return registry.get("autoGenerated.json");
    }

    public void rewriteFiles(){
        for (String s : files)
            JsonHandler.toFile(getJsonFile(s), JsonHandler.newJsonObject(JsonHandler.toJsonArray(registry.get(s), VillagerData.class), "villagers"));
    }

    public VillagerData getData(int i){
        if (isVillagerRegistered(i)) {
            for (Map.Entry<String, List<Integer>> entry : syncedDataValue.entrySet()){
                if (entry.getValue().contains(i))
                    return registry.get(entry.getKey()).get(entry.getValue().indexOf(i));
            }
            throw new RuntimeException("Something went wrong while trying to acquire VilladerData for villager: "+i);
        } else {
            VillagerData data = new VillagerData();
            data.ID = i;
            getAutoGenerated().add(data);
            return data;
        }
    }

    public void init(){
        for (String s : this.files){
            registry.put(s, Lists.<VillagerData>newArrayList());
            syncedDataValue.put(s, Lists.<Integer>newArrayList());
        }
        for (String s : files) {
            try {
                if (!getJsonFile(s).exists() && !getJsonFile(s).createNewFile())
                    throw new IOException("Error creating new file: " + s);
                registerAll(s, JsonHandler.getDataAsList(JsonHandler.getMainFileObject(getJsonFile(s)), "villagers", VillagerData.class));
                CustomVillagerModContainer.instance.info("Successfully read file: " + s);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        for (List<VillagerData> dataList : registry.values()) {
            for (VillagerData data : dataList) {
                if (!(data.ID >=0) && isVillagerRegistered(data.ID))
                    throw new DuplicateVillagerIDException(data.ID);
                registeredIDs.add(data.ID);
                Data.registerTexture(data.textureName, data.ID);
                List<MerchantRecipe> toAdd = Lists.newArrayList();
                for (VillagerData.Trade trade : data.trades) {
                    ItemStack s1 = trade.getInput1();
                    ItemStack s2 = trade.getInput2();
                    ItemStack o = trade.getOutput();
                    if (o == null) {
                        throw new RuntimeException("Invalid output on trade for villager: " + data.ID);
                    } else if (s1 == null && s2 == null) {
                        throw new RuntimeException("Both trade inputs are null, this is impossible! Villager ID: " + data.ID);
                    } else if (s1 != null && s2 != null) {
                        toAdd.add(new MerchantRecipe(s1, s2, o));
                    } else if (s1 != null) {
                        toAdd.add(new MerchantRecipe(s1, o));
                    } else {
                        toAdd.add(new MerchantRecipe(s2, o));
                    }
                }
                Data.tradeData.put(data.ID, toAdd);
                Data.spawnData.add(new VillagerTransformer(data.villagerToOverride, data.ID, data.spawnChance));
            }
        }
    }

    private boolean isNull(String s){
        return s == null || s.equals("") || s.equals("null");
    }

}
